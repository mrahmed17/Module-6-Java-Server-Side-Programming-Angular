{"version":3,"file":"ngx-print.mjs","sources":["../../../src/lib/ngx-print.base.ts","../../../src/lib/ngx-print.service.ts","../../../src/lib/print-options.ts","../../../src/lib/ngx-print.directive.ts","../../../src/lib/ngx-print.module.ts","../../../src/public_api.ts","../../../src/ngx-print.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { PrintOptions } from \"./print-options\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PrintBase {\r\n\r\n    private _printStyle: string[] = [];\r\n    private _styleSheetFile: string = '';\r\n\r\n    //#region Getters and Setters\r\n    /**\r\n     * Sets the print styles based on the provided values.\r\n     *\r\n     * @param {Object} values - Key-value pairs representing print styles.\r\n     * @protected\r\n     */\r\n    protected setPrintStyle(values: { [key: string]: { [key: string]: string } }) {\r\n        this._printStyle = [];\r\n        for (let key in values) {\r\n            if (values.hasOwnProperty(key)) {\r\n                this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @returns the string that create the stylesheet which will be injected\r\n     * later within <style></style> tag.\r\n     *\r\n     * -join/replace to transform an array objects to css-styled string\r\n     */\r\n    public returnStyleValues() {\r\n        return `<style> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;\r\n    }\r\n\r\n    /**\r\n   * @returns string which contains the link tags containing the css which will\r\n   * be injected later within <head></head> tag.\r\n   *\r\n   */\r\n    private returnStyleSheetLinkTags() {\r\n        return this._styleSheetFile;\r\n    }\r\n\r\n    /**\r\n     * Sets the style sheet file based on the provided CSS list.\r\n     *\r\n     * @param {string} cssList - CSS file or list of CSS files.\r\n     * @protected\r\n     */\r\n    protected setStyleSheetFile(cssList: string) {\r\n        let linkTagFn = function (cssFileName) {\r\n            return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\r\n        };\r\n\r\n        if (cssList.indexOf(',') !== -1) {\r\n            const valueArr = cssList.split(',');\r\n            this._styleSheetFile = valueArr.map(val => linkTagFn(val)).join('');\r\n        } else {\r\n            this._styleSheetFile = linkTagFn(cssList);\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Private methods used by PrintBase\r\n\r\n    /**\r\n     * Updates the default values for input elements.\r\n     *\r\n     * @param {HTMLCollectionOf<HTMLInputElement>} elements - Collection of input elements.\r\n     * @private\r\n     */\r\n    private updateInputDefaults(elements: HTMLCollectionOf<HTMLInputElement>): void {\r\n        for (let i = 0; i < elements.length; i++) {\r\n            const element = elements[i];\r\n            element['defaultValue'] = element.value;\r\n            if (element['checked']) element['defaultChecked'] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the default values for select elements.\r\n     *\r\n     * @param {HTMLCollectionOf<HTMLSelectElement>} elements - Collection of select elements.\r\n     * @private\r\n     */\r\n    private updateSelectDefaults(elements: HTMLCollectionOf<HTMLSelectElement>): void {\r\n        for (let i = 0; i < elements.length; i++) {\r\n            const element = elements[i];\r\n            const selectedIdx = element.selectedIndex;\r\n            const selectedOption: HTMLOptionElement = element.options[selectedIdx];\r\n\r\n            selectedOption.defaultSelected = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the default values for textarea elements.\r\n     *\r\n     * @param {HTMLCollectionOf<HTMLTextAreaElement>} elements - Collection of textarea elements.\r\n     * @private\r\n     */\r\n    private updateTextAreaDefaults(elements: HTMLCollectionOf<HTMLTextAreaElement>): void {\r\n        for (let i = 0; i < elements.length; i++) {\r\n            const element = elements[i];\r\n            element['defaultValue'] = element.value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a canvas element to an image and returns its HTML string.\r\n     *\r\n     * @param {HTMLCanvasElement} element - The canvas element to convert.\r\n     * @returns {string} - HTML string of the image.\r\n     * @private\r\n     */\r\n    private canvasToImageHtml(element: HTMLCanvasElement): string {\r\n        const dataUrl = element.toDataURL();\r\n        return `<img src=\"${dataUrl}\" style=\"max-width: 100%;\">`;\r\n    }\r\n\r\n    /**\r\n     * Includes canvas contents in the print section via img tags.\r\n     *\r\n     * @param {HTMLCollectionOf<HTMLCanvasElement>} elements - Collection of canvas elements.\r\n     * @private\r\n     */\r\n    private updateCanvasToImage(elements: HTMLCollectionOf<HTMLCanvasElement>): void {\r\n        for (let i = 0; i < elements.length; i++) {\r\n            const element = this.canvasToImageHtml(elements[i]);\r\n            elements[i].insertAdjacentHTML('afterend', element);\r\n            elements[i].remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the HTML content of a specified printing section.\r\n     *\r\n     * @param {string} printSectionId - Id of the printing section.\r\n     * @returns {string | null} - HTML content of the printing section, or null if not found.\r\n     * @private\r\n     */\r\n    private getHtmlContents(printSectionId: string): string | null {\r\n        const printContents = document.getElementById(printSectionId);\r\n        if (!printContents) return null;\r\n\r\n        const inputEls = printContents.getElementsByTagName('input');\r\n        const selectEls = printContents.getElementsByTagName('select');\r\n        const textAreaEls = printContents.getElementsByTagName('textarea');\r\n        const canvasEls = printContents.getElementsByTagName('canvas');\r\n\r\n        this.updateInputDefaults(inputEls);\r\n        this.updateSelectDefaults(selectEls);\r\n        this.updateTextAreaDefaults(textAreaEls);\r\n        this.updateCanvasToImage(canvasEls);\r\n\r\n        return printContents.innerHTML;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the HTML content of elements with the specified tag.\r\n     *\r\n     * @param {keyof HTMLElementTagNameMap} tag - HTML tag name.\r\n     * @returns {string} - Concatenated outerHTML of elements with the specified tag.\r\n     * @private\r\n     */\r\n    private getElementTag(tag: keyof HTMLElementTagNameMap): string {\r\n        const html: string[] = [];\r\n        const elements = document.getElementsByTagName(tag);\r\n        for (let index = 0; index < elements.length; index++) {\r\n            html.push(elements[index].outerHTML);\r\n        }\r\n        return html.join('\\r\\n');\r\n    }\r\n    //#endregion\r\n\r\n\r\n    /**\r\n     * Prints the specified content using the provided print options.\r\n     *\r\n     * @param {PrintOptions} printOptions - Options for printing.\r\n     * @public\r\n     */\r\n    protected print(printOptions: PrintOptions): void {\r\n\r\n        let styles = '', links = '', popOut = 'top=0,left=0,height=auto,width=auto';\r\n        const baseTag = this.getElementTag('base');\r\n\r\n        if (printOptions.useExistingCss) {\r\n            styles = this.getElementTag('style');\r\n            links = this.getElementTag('link');\r\n        }\r\n\r\n        // If the openNewTab option is set to true, then set the popOut option to an empty string. \r\n        // This will cause the print dialog to open in a new tab.\r\n        if (printOptions.openNewTab) {\r\n            popOut = '';\r\n        }\r\n\r\n        const printContents = this.getHtmlContents(printOptions.printSectionId);\r\n        if (!printContents) {\r\n            // Handle the case where the specified print section is not found.\r\n            console.error(`Print section with id ${printOptions.printSectionId} not found.`);\r\n            return;\r\n        }\r\n\r\n        const popupWin = window.open(\"\", \"_blank\", popOut);\r\n\r\n        if (!popupWin) {\r\n            // the popup window could not be opened.\r\n            console.error('Could not open print window.');\r\n            return;\r\n        }\r\n\r\n        popupWin.document.open();\r\n        popupWin.document.write(`\r\n          <html>\r\n            <head>\r\n              <title>${printOptions.printTitle ? printOptions.printTitle : \"\"}</title>\r\n              ${baseTag}\r\n              ${this.returnStyleValues()}\r\n              ${this.returnStyleSheetLinkTags()}\r\n              ${styles}\r\n              ${links}\r\n            </head>\r\n            <body ${printOptions.bodyClass ? `class=\"${printOptions.bodyClass}\"` : ''}>\r\n              ${printContents}\r\n              <script defer>\r\n                function triggerPrint(event) {\r\n                  window.removeEventListener('load', triggerPrint, false);\r\n                  ${printOptions.previewOnly ? '' : `setTimeout(function() {\r\n                    closeWindow(window.print());\r\n                  }, ${printOptions.printDelay});`}\r\n                }\r\n                function closeWindow(){\r\n                  ${printOptions.closeWindow ? 'window.close();' : ''}\r\n                }\r\n                window.addEventListener('load', triggerPrint, false);\r\n              </script>\r\n            </body>\r\n          </html>`);\r\n        popupWin.document.close();\r\n    }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { PrintBase } from \"./ngx-print.base\";\r\nimport { PrintOptions } from \"./print-options\";\r\n\r\n/**\r\n * Service for handling printing functionality in Angular applications.\r\n * Extends the base printing class (PrintBase).\r\n *\r\n * @export\r\n * @class NgxPrintService\r\n * @extends {PrintBase}\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class NgxPrintService extends PrintBase {\r\n\r\n  /**\r\n   * Initiates the printing process using the provided print options.\r\n   *\r\n   * @param {PrintOptions} printOptions - Options for configuring the printing process.\r\n   * @memberof NgxPrintService\r\n   * @returns {void}\r\n   */\r\n  public print(printOptions: PrintOptions): void {\r\n    // Call the print method in the parent class\r\n    super.print(printOptions);\r\n  }\r\n\r\n  /**\r\n   * Sets the print style for the printing process.\r\n   *\r\n   * @param {{ [key: string]: { [key: string]: string } }} values - A dictionary representing the print styles.\r\n   * @memberof NgxPrintService\r\n   * @setter\r\n   */\r\n  set printStyle(values: { [key: string]: { [key: string]: string } }) {\r\n    super.setPrintStyle(values);\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the stylesheet file for the printing process.\r\n   *\r\n   * @param {string} cssList - A string representing the path to the stylesheet file.\r\n   * @memberof NgxPrintService\r\n   * @setter\r\n   */\r\n  set styleSheetFile(cssList: string) {\r\n    super.setStyleSheetFile(cssList);\r\n  }\r\n}\r\n","export class PrintOptions {\r\n  printSectionId: string = null;\r\n  printTitle: string = null;\r\n  useExistingCss: boolean = false;\r\n  bodyClass: string = '';\r\n  openNewTab: boolean = false;\r\n  previewOnly: boolean = false;\r\n  closeWindow: boolean = true;\r\n  printDelay: number = 0;\r\n\r\n  constructor(options?: Partial<PrintOptions>) {\r\n    if (options) {\r\n      Object.assign(this, options);\r\n    }\r\n  }\r\n}\r\n","import { Directive, HostListener, Input } from '@angular/core';\r\nimport { PrintBase } from './ngx-print.base';\r\nimport { PrintOptions } from './print-options';\r\n@Directive({\r\n  selector: \"button[ngxPrint]\",\r\n  standalone: true\r\n})\r\nexport class NgxPrintDirective extends PrintBase {\r\n  private printOptions = new PrintOptions();\r\n  /**\r\n   * Prevents the print dialog from opening on the window\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() set previewOnly(value: boolean) {\r\n    this.printOptions = { ...this.printOptions, previewOnly: value };\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() set printSectionId(value: string) {\r\n    this.printOptions = { ...this.printOptions, printSectionId: value };\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() set printTitle(value: string) {\r\n    this.printOptions = { ...this.printOptions, printTitle: value };\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() set useExistingCss(value: boolean) {\r\n    this.printOptions = { ...this.printOptions, useExistingCss: value };\r\n  }\r\n\r\n  /**\r\n   * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() set printDelay(value: number) {\r\n    this.printOptions = { ...this.printOptions, printDelay: value };\r\n  }\r\n\r\n  /**\r\n   * Whether to close the window after print() returns.\r\n   *\r\n   */\r\n  @Input() set closeWindow(value: boolean) {\r\n    this.printOptions = { ...this.printOptions, closeWindow: value };\r\n  }\r\n\r\n  /**\r\n   * Class attribute to apply to the body element.\r\n   *\r\n   */\r\n  @Input() set bodyClass(value: string) {\r\n    this.printOptions = { ...this.printOptions, bodyClass: value };\r\n  }\r\n\r\n  /**\r\n   * Whether to open a new window or default to new window.\r\n   *\r\n   */\r\n  @Input() set openNewTab(value: boolean) {\r\n    this.printOptions = { ...this.printOptions, openNewTab: value };\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input()\r\n  set printStyle(values: { [key: string]: { [key: string]: string } }) {\r\n    super.setPrintStyle(values);\r\n  }\r\n\r\n\r\n  /**\r\n   * @memberof NgxPrintDirective\r\n   * @param cssList\r\n   */\r\n  @Input()\r\n  set styleSheetFile(cssList: string) {\r\n    super.setStyleSheetFile(cssList);\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @HostListener('click')\r\n  public print(): void {\r\n    super.print(this.printOptions);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxPrintDirective } from './ngx-print.directive';\r\n\r\n@NgModule({\r\n  imports: [NgxPrintDirective],\r\n  exports: [NgxPrintDirective]\r\n})\r\nexport class NgxPrintModule { }\r\n","/*\r\n * Public API Surface of ngx-print\r\n */\r\nexport * from './lib/ngx-print.service';\r\nexport * from './lib/ngx-print.directive';\r\nexport * from './lib/ngx-print.module';\r\nexport * from './lib/print-options';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}